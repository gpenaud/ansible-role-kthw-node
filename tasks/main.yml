# ------------------------------------------------------------------------------
# configure host kernel
# ------------------------------------------------------------------------------

- name: add required modules and confiure kernel parameters
  become: yes
  connection: local
  shell: |-
    # modules
    modprobe ip_vs
    modprobe ip_vs_rr
    modprobe ip_vs_wrr
    modprobe ip_vs_sh
    modprobe ip_tables
    modprobe ip6_tables
    modprobe netlink_diag
    modprobe nf_nat
    modprobe overlay
    modprobe br_netfilter
    # nf_conntrack_max
    sysctl -w net.netfilter.nf_conntrack_max=131072

# ------------------------------------------------------------------------------
# install required packages for nodes
# ------------------------------------------------------------------------------

- name: install required packages for nodes
  package:
    name: "{{ item }}"
    update_cache: yes
  loop:
    - socat
    - conntrack
    - ipset
    - kmod

- name: disable swap
  shell: swapoff -a

- name: download node binaries
  get_url:
    url: "{{ binary }}"
    dest: /root
    mode: 0740
  loop:
    - https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.21.0/crictl-v1.21.0-linux-amd64.tar.gz
    - https://github.com/opencontainers/runc/releases/download/v1.0.0-rc93/runc.amd64
    - https://github.com/containernetworking/plugins/releases/download/v0.9.1/cni-plugins-linux-amd64-v0.9.1.tgz
    - https://github.com/containerd/containerd/releases/download/v1.4.4/containerd-1.4.4-linux-amd64.tar.gz
    - https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kubectl
    - https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kube-proxy
    - https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kubelet
  loop_control:
    loop_var: binary

- name: create node necessary directories
  become: yes
  file:
    path: "{{ directory }}"
    state: directory
  loop:
    - /etc/cni/net.d
    - /opt/cni/bin
    - /var/lib/kubelet
    - /var/lib/kube-proxy
    - /var/lib/kubernetes
    - /var/run/kubernetes
    - /etc/containerd
    - /root/containerd
  loop_control:
    loop_var: directory

- name: extract node binaries
  shell: |-
    tar -xvf crictl-v1.21.0-linux-amd64.tar.gz
    tar -xvf containerd-1.4.4-linux-amd64.tar.gz -C containerd
    tar -xvf cni-plugins-linux-amd64-v0.9.1.tgz -C /opt/cni/bin/
    cp runc.amd64 runc
    chmod +x crictl kubectl kube-proxy kubelet runc
    mv crictl kubectl kube-proxy kubelet runc /usr/local/bin/
    mv containerd/bin/* /bin/
  args:
    warn: no

# ------------------------------------------------------------------------------
# set-up cni
# ------------------------------------------------------------------------------

- name: templates out cni interfaces
  template:
    src: "{{ template.src }}"
    dest: "{{ template.dest }}"
  loop:
    - src: cni-10-bridge.conf.j2
      dest: /etc/cni/net.d/10-bridge.conf
    - src: cni-99-loopback.conf.j2
      dest: /etc/cni/net.d/99-loopback.conf
  loop_control:
    loop_var: template

# ------------------------------------------------------------------------------
# set-up containerd
# ------------------------------------------------------------------------------

- name: templates out containerd configuration and service
  template:
    src: "{{ template.src }}"
    dest: "{{ template.dest }}"
  loop:
    - src: cni-10-bridge.conf.j2
      dest: containerd-config.toml.j2
    - src: containerd.service.j2
      dest: /etc/systemd/system/containerd.service
  loop_control:
    loop_var: template

- name: start, enable and reload containerd systemd service
  systemd:
    state: restarted
    enabled: yes
    daemon_reload: yes
    name: containerd

# ------------------------------------------------------------------------------
# set-up the kubelet
# ------------------------------------------------------------------------------

- name: move certificates to kubelet and kube-proxy directories
  shell: |-
    cp {{ inventory_hostname }}-key.pem {{ inventory_hostname }}.pem /var/lib/kubelet/
    cp {{ inventory_hostname }}.kubeconfig /var/lib/kubelet/kubeconfig
    cp kube-proxy.kubeconfig /var/lib/kube-proxy/kubeconfig
    cp ca.pem /var/lib/kubernetes/
  args:
    warn: no

- name: templates out kubelet configuration and service
  template:
    src: "{{ template.src }}"
    dest: "{{ template.dest }}"
  loop:
    - src: kubelet-config.yml.j2
      dest: /var/lib/kubelet/kubelet-config.yaml
    - src: kubelet.service.j2
      dest: /etc/systemd/system/kubelet.service
  loop_control:
    loop_var: template

- name: link /dev/kmsg to /dev/console
  shell: |-
    rm /dev/kmsg
    ln -s /dev/console /dev/kmsg
  args:
    warn: no

- name: start, enable and reload kubelet systemd service
  systemd:
    state: restarted
    enabled: yes
    daemon_reload: yes
    name: kubelet

# ------------------------------------------------------------------------------
# set-up the kube-proxy
# ------------------------------------------------------------------------------

- name: templates out kube-proxy configuration and service
  template:
    src: "{{ template.src }}"
    dest: "{{ template.dest }}"
  loop:
    - src: kube-proxy-config.yml.j2
      dest: /var/lib/kube-proxy/kube-proxy-config.yaml
    - src: kube-proxy.service.j2
      dest: /etc/systemd/system/kube-proxy.service
  loop_control:
    loop_var: template

- name: start, enable and reload kube-proxy systemd service
  systemd:
    state: restarted
    enabled: yes
    daemon_reload: yes
    name: kube-proxy
